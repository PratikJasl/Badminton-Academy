// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId                  Int @id @default(autoincrement())
  fullName                String @unique
  age                     Int
  gender                  Gender
  email                   String @unique
  phone                   String 
  password                String
  role                    Roles
  locationId              Int
  primaryLocation         Location @relation(fields: [locationId], references: [locationId])
  coachingPlanId          Int
  coachingPlan            CoachingPlan @relation(fields: [coachingPlanId], references: [coachingPlanId]) //one-to-Many one Plan many Users
  otpVerificationCode     String @default("")
  otpVerificationExpiry   DateTime @default(now())
  isVerified              Boolean @default(false)
  otpResetCode            String @default("")
  otpResetExpiry          DateTime @default(now())
  joinDate                DateTime   @default(now())
  membershipStatus        membershipStatus @default(active)
  attendance              Attendance[]
  locations               UserLocation[]
}

model Location {
  locationId              Int @id @default(autoincrement())
  name                    String
  address                 String
  users                   UserLocation[]
  primaryUsers            User[]
  coachingSchedule        CoachingSchedule? @relation(fields: [coachingScheduleId], references: [coachingScheduleId]) //one-to-one one Location one Schedule
  coachingScheduleId      Int? @unique
}

model UserLocation {
  userId                  Int
  locationId              Int
  user                    User @relation(fields: [userId], references: [userId])
  location                Location @relation(fields: [locationId], references: [locationId])

  @@id([userId, locationId])
}

model CoachingPlan {
  coachingPlanId          Int @id @default(autoincrement())
  name                    String
  description             String
  planDuration            String
  price                   Decimal
  users                   User[]
}

model CoachingSchedule {
  coachingScheduleId      Int @id @default(autoincrement())
  coachingDays            String[]
  coachingTime            String
  coachingDuration        String
  location                Location? @relation
  attendance              Attendance[]
}

model Attendance {
  attendanceId            Int @id @default(autoincrement())
  attendanceStatus        AttendanceStatus
  attendanceDate          DateTime
  userId                  Int
  coachingScheduleId      Int
  user                    User @relation(fields: [userId], references: [userId])
  coachingSchedule        CoachingSchedule @relation(fields: [coachingScheduleId], references: [coachingScheduleId])
}

enum AttendanceStatus {
  present
  absent
}

enum Roles {
  admin
  student
  coach
}

enum membershipStatus {
  active
  inactive
}

enum Gender {
  male
  female
  other
}